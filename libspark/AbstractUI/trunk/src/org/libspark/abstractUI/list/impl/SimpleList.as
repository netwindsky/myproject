package org.libspark.abstractUI.list.impl {	import org.libspark.abstractUI.list.IList;	import org.libspark.abstractUI.scrollbar.IScrollbar;	import org.libspark.utils.ArrayUtil;		import flash.display.DisplayObjectContainer;	import flash.events.EventDispatcher;			/**	 * @author Mk-10:cellfusion	 */	public class SimpleList extends EventDispatcher implements IList 	{		private var _view:DisplayObjectContainer;		private var _scrollbar:IScrollbar;		private var _children:Array;		private var _selected:uint;		private var _allowMultipleSelection:Boolean;		public function SimpleList(view:DisplayObjectContainer, scrollbar:IScrollbar)		{			_view = view;			_scrollbar = scrollbar;						_children = [];		}				public function scrollToIndex(index:int):void		{		}				public function scrollToSelected():void		{		}				public function getItemAt(index:uint):*		{			return ArrayUtil.getElementAt(index, _children);		}				public function isItemSelected(item:*):Boolean		{			return ArrayUtil.getElementIndex(item, _children) == _selected;		}		public function addItem(item:*):*		{			if (ArrayUtil.getElementIndex(item, _children) != -1) {				throw new ArgumentError("既に追加されています");			}						return ArrayUtil.addElement(item, _children);		}				public function addItemAt(item:*, index:uint):*		{			if (ArrayUtil.getElementIndex(item, _children) != -1) {				throw new ArgumentError("既に追加されています");			}						return ArrayUtil.addElementAt(item, index, _children);		}				public function removeItem(item:*):*		{			if (ArrayUtil.getElementIndex(item, _children) == -1) {				throw new ArgumentError("既に削除されています");			}						return ArrayUtil.removeElement(item, _children);		}				public function removeItemAt(index:uint):*		{			if (_children.length >= index) {				throw new ArgumentError("");			}						return ArrayUtil.removeElementAt(index, _children);		}				public function removeAll():void		{			for (var i:uint in _children) {				ArrayUtil.removeElementAt(i, _children);			}						_children = [];		}				public function replaceItemAt(item:*, index:uint):*		{			return null;		}				public function get length():uint		{			return 0;		}				public function get allowMultipleSelection():Boolean		{			return _allowMultipleSelection;		}		public function set allowMultipleSelection(value:Boolean):void		{			_allowMultipleSelection = value;		}				public function get rowCount():uint		{			return 0;		}		public function set rowCount(value:uint):void		{		}				public function get selectable():Boolean		{			return null;		}		public function set selectable(value:Boolean):void		{		}				public function get selectedIndex():int		{			return 0;		}		public function set selectedIndex(value:int):void		{		}				public function get selectedIndices():Array		{			return null;		}		public function set selectedIndices(value:Array):void		{		}				public function get selectedItem():*		{			return null;		}		public function set selectedItem(value:*):void		{		}				public function get selectedItems():Array		{			return null;		}		public function set selectedItems(value:Array):void		{		}	}}