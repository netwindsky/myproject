///////////////////////////////////////////////////////////
//  SocketManager.as
//  Macromedia ActionScript Implementation of the Class SocketManager
//  Generated by Enterprise Architect
//  Created on:      03-八月-2010 18:03:43
//  Original author: lifeng
///////////////////////////////////////////////////////////

package com.crystalcg.ncity.communication.socket
{

	
	import com.crystalcg.ncity.events.CustomEvent;
	import com.crystalcg.ncity.interfaces.communication.ICommunication;
	import com.crystalcg.ncity.interfaces.communication.IRequest;
	
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IOErrorEvent;
	import flash.events.ProgressEvent;
	import flash.events.SecurityErrorEvent;
	import flash.net.Socket;
	import flash.utils.ByteArray;
	import flash.utils.Dictionary;

	/**
	 * @author lifeng
	 * @version 1.0
	 * @created 03-八月-2010 18:03:43
	 */
	public class SocketManager extends EventDispatcher implements ICommunication
	{
		private var _socket:Socket=new Socket();
		private var _host:String="192.168.5.27";
		//private var _host:String="172.17.4.221";
		private var _port:int=1256;
		private var _sessionID:Dictionary=new Dictionary();
		private var _broadcastHandler:Function;
		public function SocketManager(){
			_socket.connect(_host,_port);
			_socket.addEventListener(ProgressEvent.SOCKET_DATA,dataHandler);
			_socket.addEventListener(Event.CONNECT,contentHandler);
			_socket.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
			_socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR,securityErrorHandler);
		}
	    /**
	     * 
	     * @param request    发送请求对象。
	     * @param functionHandler    处理方法
	     */
	    public function send(request:IRequest, functionHandler:Function):int
	    {
			var req:SocketRequest=request as SocketRequest;
			req.sessionID=Math.floor(Math.random()*100000000);
			_sessionID[req.sessionID]=functionHandler;
			var byte:ByteArray=new ByteArray();			
			byte.writeObject(req);
			byte.position=0;
			var bb:ByteArray=new ByteArray();
			bb.writeUnsignedInt(byte.length);
			bb.writeObject(req);
			if(_socket.connected){
				_socket.writeBytes(bb,0,bb.length);
				_socket.flush();
				return 1;
			}else{
				return 0;
			}
	    }
		/**
		 * 接收数据处理。
		 * 
		 * @param e
		 */
		private function dataHandler(e:Event):void{
			var obj:Object=_socket.readObject();
			if(obj is String){
				
			}else{
				if(obj.sessionID){
					var _fuction:Function=_sessionID[obj.sessionID] as Function;
					delete obj.sessionID;
					if(_fuction!=null){
						_fuction.call(null,obj);
					}
				}else{
					trace("---->>",obj.command);
					dispatchEvent(new CustomEvent("broadcast",obj));
				}
			}
			
		}
		/**
		 * 链接成功以后，方法处理。
		 * 
		 * @param e
		 */
		private function contentHandler(e:Event):void{
			trace("链接成功！");
			
			dispatchEvent(new CustomEvent("connectsuccess"));
			
		}
		/**
		 * 链接异常 处理。
		 * 
		 * @param e
		 */
		private function ioErrorHandler(e:IOErrorEvent):void{
			trace("[检查远程服务器，IP="+_host+", port="+_port+"]");
		}
		/**
		 * 安全限制处理。
		 * 
		 * @param e
		 */
		private function securityErrorHandler(e:SecurityErrorEvent):void{
			trace("安全有问题。")
		}
	}//end SocketManager

}